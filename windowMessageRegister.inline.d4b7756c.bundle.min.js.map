{"version":3,"file":"windowMessageRegister.inline.d4b7756c.bundle.min.js","mappings":"iIAEO,SAAyBA,GAE/B,MAAMC,EAA0B,IAAIC,IAC9BC,EAAgD,GAEhDC,EAAiBC,IACtB,MAAMC,EAA8C,GACpDL,EAAwBM,SAASC,IAC5BH,EAAQI,eAAeD,IAC1BF,EAAmBI,KAAKF,E,IAG1BF,EAAmBC,SAASC,IAC3BP,EAAwBU,OAAOH,GAC/BH,EAAQO,YAAYJ,EAAI,GACvB,EAcHR,EAAOa,iBAAiB,WAXCL,IACxB,MAAMM,EAAQ,CAAEC,OAAQP,EAAIO,OAAQC,KAAMR,EAAIQ,KAAMC,OAAQT,EAAIS,QAC1DZ,EAAUF,EAAgBe,MAAMC,GAAMA,EAAEV,eAAeK,KACzDT,GACHD,EAAcC,GACdA,EAAQO,YAAYE,IAEpBb,EAAwBmB,IAAIN,E,IAM9Bd,EAAOqB,yBAA4BhB,IAClCF,EAAgBO,KAAKL,GACrBD,EAAcC,EAAQ,CAExB,CCnCAiB,CAAgBtB,O","sources":["webpack:///../../feature-window-message-registrar/src/inline/createWindowMessageRegister.ts","webpack:///../../feature-window-message-registrar/src/inline/windowMessageRegister.ts"],"sourcesContent":["import { MessageRegistrarWindow, WindowMessageConsumer } from '../types'\n\nexport function createRegistrar(window: MessageRegistrarWindow) {\n\t// TODO this code creates an inherit issue where messages without consumer are left in the queue indefinitely\n\tconst messagesBeforeHydration = new Set<MessageEventInit>()\n\tconst messageHandlers: Array<WindowMessageConsumer> = []\n\n\tconst flushMessages = (handler: WindowMessageConsumer) => {\n\t\tconst consumableMessages: Array<MessageEventInit> = []\n\t\tmessagesBeforeHydration.forEach((evt) => {\n\t\t\tif (handler.canHandleEvent(evt)) {\n\t\t\t\tconsumableMessages.push(evt)\n\t\t\t}\n\t\t})\n\t\tconsumableMessages.forEach((evt) => {\n\t\t\tmessagesBeforeHydration.delete(evt)\n\t\t\thandler.handleEvent(evt)\n\t\t})\n\t}\n\n\tconst queueOrDispatch = (evt: MessageEventInit) => {\n\t\tconst event = { source: evt.source, data: evt.data, origin: evt.origin }\n\t\tconst handler = messageHandlers.find((h) => h.canHandleEvent(event))\n\t\tif (handler) {\n\t\t\tflushMessages(handler)\n\t\t\thandler.handleEvent(event)\n\t\t} else {\n\t\t\tmessagesBeforeHydration.add(event)\n\t\t}\n\t}\n\n\twindow.addEventListener('message', queueOrDispatch)\n\n\twindow._addWindowMessageHandler = (handler) => {\n\t\tmessageHandlers.push(handler)\n\t\tflushMessages(handler)\n\t}\n}\n","import { createRegistrar } from './createWindowMessageRegister'\n\ncreateRegistrar(window)\n"],"names":["window","messagesBeforeHydration","Set","messageHandlers","flushMessages","handler","consumableMessages","forEach","evt","canHandleEvent","push","delete","handleEvent","addEventListener","event","source","data","origin","find","h","add","_addWindowMessageHandler","createRegistrar"],"sourceRoot":""}